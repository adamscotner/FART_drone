#include "getRelativeSignals.h"


using namespace std;

/*
	Get the new relative values (%) of Yaw, Pitch, Roll, and Throttle
*/
vector<float> getRelativeSignals(vector<float> target, float skew, vector<float> idealLoc)
{
#DEFINE MAX_DIST[] = {1.0,1.0,1.0};
#DEFINE MAX_DIST[] = {1.0,1.0,1.0};
#DEFINE MAX_DIST[] = {1.0,1.0,1.0};

	//float MAX_DIST[] = { 1, 1, 1 };
	//float MIN_X = -1, MIN_Y = -1, MIN_Z = -1;
	//float MAX_POWER_DIST[] = { 0.75, 0.75, 0.75 };


	// target[0] | [-1, 1] => roll => newSignals[2] | [0, 1]
	// target[1] | [-1, 1] => throttle => newSignals[3] | [0, 1]
	// target[2] | [-1, 1] => pitch => newSignals[1] | [1, 0]
	// skew | [-1, 1] => yaw => newSignals[0 | [0, 1]

	float sigArray[] = {
		checkAndTranslate(skew, false),
		checkAndTranslate(target[2], true),
		checkAndTranslate(target[0], false),
		checkAndTranslate(target[1], false)
	};

	// create vector from float array
	vector<float> newSignals (sigArray, sigArray + sizeof(sigArray) / sizeof(float) );

	return newSignals;

}

/*
	Get the translated relative value, from [-1, 1] to [0, 1] or [1, 0], depending on
	the value of reverse
*/
float checkAndTranslate(float orig, bool reverse)
{
	//TODO: check values and throw appropriate error

	// if the object is beyond the threshold to trigger maximum power,
	// force maximum power, else scale distance accordingly
	if (abs(orig) > MAX_POWER_DIST[0]) 
		orig = (orig > 0) ? 1 : -1; 
	else 
		orig = orig * (MAX_DIST[0] / MAX_POWER_DIST[0]);

	orig = reverse ? (-1 * orig) : orig;

	return (orig / 2) + 0.5;
}
